@page "/Codedash"
@inject HttpClient HttpClient
@using codedash.Shared
@using Microsoft.AspNetCore.Components
@using codedash.Client.Data
@using Blazored.LocalStorage
@using System.Net
@inject ILocalStorageService LSS
@inject NavigationManager NavMan

<style>
    body {
        background-image: linear-gradient(to right, #ddd6f3, #faaca8);
    }
</style>

<div class="center-content">
    <h2 class="text-center">@title</h2>
    <pre id="codedash-output" class="text-start">
        @output
    </pre>
    <pre id="codedash-problem">
    <div class="text-start">
        @foreach (var (index, block) in pbs.Collect(0, (i, block) =>
        {
            var next = block.IsInput ? i + 1 : i;
            return ((i, block), next);
        }))
        {
            if (block.IsInput)
            {
                <input type="text" class="@styles[index]" @bind="inputs[index]" size="@block.FieldLength.ToString()"/>
            }
            else
            {
                <span style="white-space: pre">@block.Content</span>
            }
        }
    </div>
    </pre>
    <p class="@(showNextLevel ? "" : "d-none")" style="color: var(--bs-success)">
        Congratulations! You can go to the next level!
    </p>
    <p class="@(showCampaignEnd ? "" : "d-none")" style="color: var(--bs-success)">
        You've completed all of the official levels! Wow!<br/>
        Check out some problems submitted by Codedashers like you!
    </p>
    <button @onclick="Submit" class="btn btn-primary mt-3 align-self-end">Submit</button>
    <button @onclick="GoToNextLevel" class="btn btn-success mt-3 align-self-end @(showNextLevel ? "" : "d-none")">Continue</button>
    <a href="/Listing" class="btn btn-success mt-3 align-self-end @(showCampaignEnd ? "" : "d-none")">Go to Listing</a>

</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? id { get; set; }

    private bool isCampaign = false;

    private string title = "";
    private string output = "";
    private List<ProblemBlock> pbs = new();
    private List<string> inputs = new();
    private List<string> styles = new();
    private bool showNextLevel = false;
    private bool showCampaignEnd = false;

    protected override async Task OnInitializedAsync()
    {
        Problem p = await ((Func<Task<Problem>>) (async () =>
        {
            if (!(id is null))
            {
                HttpResponseMessage response = await HttpClient.GetAsync($"ProblemApi/Get/{id}");
                return (await response.Content.ReadFromJsonAsync<Problem>())!;
            }
            isCampaign = true;
            if (!await LSS.ContainKeyAsync("codedash-campaign-level"))
            {
                await LSS.SetItemAsync<int>("codedash-campaign-level", 0);
            }

            int level = await LSS.GetItemAsync<int>("codedash-campaign-level");

            HttpResponseMessage response0 = await HttpClient.GetAsync($"ProblemApi/Campaign/{level}");
            string guid = await response0.Content.ReadAsStringAsync();

            id = guid;
            HttpResponseMessage response1 = await HttpClient.GetAsync($"ProblemApi/Get/{guid}");
            return (await response1.Content.ReadFromJsonAsync<Problem>())!;
        }))();

        title = p.Title!;
        output = p.Output!;
        pbs = ProblemBlock.ParseProblemString(p.Chunks!);
    // Resize input list to match
        var size = pbs.Aggregate(0, (curr, next) => next.IsInput ? curr + 1 : curr);
        inputs.Resize(size, "");
        styles.Resize(size, "");
    }

    private async void Submit()
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync($"ProblemApi/Verify/{id}", inputs);
        List<int> results = (await response.Content.ReadFromJsonAsync<List<int>>())!;
        foreach (var (value, index) in results.Select((v, i) => (v, i)))
        {
            switch (value)
            {
                case 0:
                    styles[index] = "blank-wrong";
                    break;
                case 1:
                    styles[index] = "blank-correct";
                    break;
                default:
                    throw new InvalidOperationException("Blank broke");
            }
        }

        if (results.TrueForAll(i => i == 1) && isCampaign)
        {
            int level = await LSS.GetItemAsync<int>("codedash-campaign-level");
            HttpResponseMessage response0 = await HttpClient.GetAsync($"ProblemApi/Campaign/{level + 1}");
            switch (response0.StatusCode)
            {
                case HttpStatusCode.OK:
                    showNextLevel = true;
                    await Task.Delay(0);
                    StateHasChanged();
                    break;
                case HttpStatusCode.BadRequest:
                    showCampaignEnd = true;
                    await Task.Delay(0);
                    StateHasChanged();
                    break;
                default:
                    break;
            }
        }
    }

    private async void GoToNextLevel()
    {
        if (!await LSS.ContainKeyAsync("codedash-campaign-level"))
        {
            await LSS.SetItemAsync<int>("codedash-campaign-level", 0);
        }

        int level = await LSS.GetItemAsync<int>("codedash-campaign-level");
        await LSS.SetItemAsync<int>("codedash-campaign-level", level + 1);

        NavMan.NavigateTo(NavMan.Uri, forceLoad: true);
    }

}