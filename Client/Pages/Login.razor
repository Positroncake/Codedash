@page "/Login"
@using global::Codedash.Shared
@using System.Text
@using System.Security.Cryptography
@using Blazored.LocalStorage
@inject HttpClient _httpClient
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager

<style> 
input[type~="text"],[type~="password"]{
  width: 100%;
  padding: 2px 10px;
  box-sizing: border-box;
  border: none;
  border-bottom: 3px solid black;
}
</style>
<style>
    body {
      background-image: linear-gradient(to right, #ddd6f3, #faaca8);
    }
</style>
<div class="text-center pt-md-5">
    <div class="text-center mb-5">
        <h1>Login</h1>
    </div>
    <div class="d-flex flex-row justify-content-center">
        <div style="color: #525151" class="form-box">
            <div class="form-grid">
                <label for="signup-username">Username:</label>
                <input type="text"@bind="Username" id="signup-username"/>
                <label for="signup-password">Password:</label>
                <input type="password" @bind="Password" id="signup-password"/>
            </div>
            <button @onclick="HashLoginDetails" class="btn btn-primary mt-3 align-self-end" id="signup-button">Login!</button>

            <a class="mt-4 align-self-end" href="/register">I don't have an account</a>
        </div>
    </div>
</div>

@code {
    // ReSharper disable InconsistentNaming
    private String? Username, Password;
    // ReSharper restore InconsistentNaming
    private Account NewAccount { get; } = new();

    private void HashLoginDetails()
    {
        String usernameHash, passwordHash;
        Byte[] usernameBytes = Encoding.UTF32.GetBytes(Username ?? String.Empty);
        Byte[] passwordBytes = Encoding.UTF32.GetBytes(Password ?? String.Empty);
        using (var sha512 = SHA512.Create())
        {
            Byte[] hashedUsernameBytes = sha512.ComputeHash(usernameBytes);
            Byte[] hashedPasswordBytes = sha512.ComputeHash(passwordBytes);
            var usernameString = new StringBuilder(128);
            foreach (Byte x in hashedUsernameBytes) usernameString.Append(x.ToString("X2"));
            var passwordString = new StringBuilder(128);
            foreach (Byte x in hashedPasswordBytes) passwordString.Append(x.ToString("X2"));
            usernameHash = usernameString.ToString().ToLowerInvariant();
            passwordHash = passwordString.ToString().ToLowerInvariant();
        }

        NewAccount.Id = "00000000-0000-0000-0000-000000000000";
        NewAccount.UsernameHash = usernameHash;
        NewAccount.PasswordHash = passwordHash;
        NewAccount.DisplayName = "";
#pragma warning disable CS4014
        SendToController(NewAccount);
#pragma warning restore CS4014
    }

    private async Task SendToController(Account account)
    {
        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("AccountApi/Login", account);
        if (response.IsSuccessStatusCode)
        {
            String token = await response.Content.ReadAsStringAsync();
            await _localStorageService.SetItemAsync("loginToken", token);
            
            _navigationManager.NavigateTo("/AccountPage");
        }
    }

}