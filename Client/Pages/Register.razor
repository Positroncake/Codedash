@page "/Register"
@using global::Codedash.Shared
@using System.Text
@using System.Security.Cryptography
@using Blazored.LocalStorage
@inject HttpClient _httpClient
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager

<style> 
input[type~="text"],[type~="password"]{
  width: 100%;
  padding: 2px 10px;
  box-sizing: border-box;
  border: none;
  border-bottom: 3px solid black;
}
</style>
<style>
    body {
      background-image: linear-gradient(to right, #ddd6f3, #faaca8);
    }
</style>

<div class="text-center pt-md-5">
    <h1 class="text-center mb-5">Register</h1>
    <div class="d-flex flex-row justify-content-center">
        <div style="color: #525151" class="form-box">
            <div class="form-grid">
                <label for="signup-username">Username</label>
                <input type="text"@bind="Username" id="signup-username"/>
                <label for="signup-password">Password</label>
                <input type="password" @bind="Password" id="signup-password"/>
                <label for="signup-display">Display name</label>
                <input type="text"@bind="DisplayName" id="signup-display"/>
            </div>

            <button @onclick="AddToClass" class="btn btn-primary mt-3 align-self-end">Register!</button>
            <a class="mt-4 align-self-end" href="/login">I already have an account</a>
        </div>
    </div>
</div>


@code {
    private string _accountToken = "";
    // ReSharper disable InconsistentNaming
    private string? Username, Password, DisplayName;
    // ReSharper restore InconsistentNaming

    private Account NewAccount { get; } = new();

    private void AddToClass()
    {
        string usernameHash, passwordHash;
        byte[] usernameBytes = Encoding.UTF32.GetBytes(Username ?? string.Empty);
        byte[] passwordBytes = Encoding.UTF32.GetBytes(Password ?? string.Empty);
        using (var sha512 = SHA512.Create())
        {
            byte[] hashedUsernameBytes = sha512.ComputeHash(usernameBytes);
            byte[] hashedPasswordBytes = sha512.ComputeHash(passwordBytes);
            var usernameString = new StringBuilder(128);
            foreach (byte x in hashedUsernameBytes) usernameString.Append(x.ToString("X2"));
            var passwordString = new StringBuilder(128);
            foreach (byte x in hashedPasswordBytes) passwordString.Append(x.ToString("X2"));
            usernameHash = usernameString.ToString().ToLowerInvariant();
            passwordHash = passwordString.ToString().ToLowerInvariant();
        }

        NewAccount.Id = Guid.NewGuid().ToString().ToLowerInvariant();
        NewAccount.UsernameHash = usernameHash;
        NewAccount.PasswordHash = passwordHash;
        NewAccount.DisplayName = DisplayName;
#pragma warning disable CS4014
        SendToController(NewAccount);
#pragma warning restore CS4014
    }

    private async Task SendToController(Account account)
    {
        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("AccountApi/Register", account);
        _accountToken = await response.Content.ReadAsStringAsync();
        await _localStorage.SetItemAsync("loginToken", _accountToken);
        await _localStorage.GetItemAsync<string>("loginToken");
        
        _navigationManager.NavigateTo("/AccountPage");
    }

}