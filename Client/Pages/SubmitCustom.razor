@page "/SubmitCustom"
@inject HttpClient HttpClient
@using System.Text
@using System.Text.RegularExpressions
@using codedash.Shared

<div class="center-content">
    <div style="display: inline-block">
        <p>Code and input fields</p>
        <textarea @bind="_input"></textarea>
    </div>
    <div style="display: inline-block">
        <p>Expected output</p>
        <textarea @bind="_output"></textarea>
    </div>
    <div style="display: inline-block">
        <p>Name of custom codedash</p>
        <input @bind="_title"/>
        <p>Difficulty level 0-5 </p>
        <input @bind="@_difficulty"/>
    </div>
</div>
<button @onclick="Parse">Submit</button>

@code {
    private string _input = "";
    private string _output = "";
    private string _title = "";
    private string _difficulty = "";

    private void Parse()
    {
        string text = _input;
        var firstIsInputField = false;
        text = text.Replace(@"/$[", "\u0011");
        text = text.Replace(@"]$\", "\u0011");
        string[] str = text.Split('\u0011');

        var data = new StringBuilder();
        
        for (var i = 0; i < str.Length; ++i)
        {
            if (firstIsInputField && i % 2 == 0 || !firstIsInputField && i % 2 != 0)
            {
                data.Append(str[i]);
                data.Append("\u001f");
                data.Append("0");
                data.Append("\u001f");
                data.Append("-1");
                data.Append("\u001e");
            }
            else if (firstIsInputField && i % 2 != 0 || !firstIsInputField && i % 2 == 0)
            {
                data.Append(str[i]);
                data.Append("\u001f");
                data.Append("1");
                data.Append("\u001f");
                data.Append(str[i].Length + 2);
                data.Append("\u001e");
            }
        }

    // remove last char (should always be \u001E)
        data.Remove(data.Length - 1, 1);
        var result = data.ToString();
        SendToController(result, _difficulty);
    }

    private async Task SendToController(string output, string difficulty)
    {
        var problem = new Problem
        {
            Id = Guid.NewGuid().ToString().ToLowerInvariant(),
            Chunks = output,
            Output = _output,
            Title = _title,
            Difficulty = int.Parse(difficulty),
            IsUserMade = true
        };
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("ProblemApi/Submit", problem);
    }
}